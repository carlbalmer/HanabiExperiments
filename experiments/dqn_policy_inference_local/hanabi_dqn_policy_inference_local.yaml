hanabi-dqn-policy-inference-local:
  run: LegalActionDQN
  env: Hanabi
  # by what criterion to stop training
  stop:
    timesteps_total: 100000000
  # checkpointing and uploading of checkpoints
  checkpoint_freq: 50
  checkpoint_at_end: True
  max_failures: 10
  #trainer config
  config:
    # environment parameters
    env_config:
      colors: 5
      ranks: 5
      players: 4
      hand_size: 4
      max_information_tokens: 8
      max_life_tokens: 3
      observation_type: 1
    # model parameters
    model:
      # n hidden layers
      fcnet_hiddens: [512] # has no effect
      custom_model: PI_FC
      custom_preprocessor: OriginalSpaceSamplingPreprocessor
      fcnet_activation: relu
      custom_options:
        obs_module_hiddens: [512]
        q_module_hiddens: [512]
        policy_module_hiddens: [512]
        policy_head_hiddens: [512]
    # q-head hidden size
    # === Model ===
    # Number of atoms for representing the distribution of return. When
    # this is greater than 1 distributional Q-learning is used.
    # the discrete supports are bounded by v_min and v_max
    num_atoms: 51
    v_min: -10.0
    v_max: 10.0
    # Whether to use noisy network
    noisy: False
    # control the initial value of noisy nets
    sigma0: 0.5
    # Whether to use dueling dqn
    dueling: True
    # Whether to use double dqn
    double_q: True
    # Postprocess model outputs with these hidden layers to compute the
    # state and action values. See also the model config in catalog.py.
    hiddens: [512]
    # N-step Q learning
    n_step: 1

    # === Exploration ===
    # Max num timesteps for annealing schedules. Exploration is annealed from
    # 1.0 to exploration_fraction over this number of timesteps scaled by
    # exploration_fraction
    schedule_max_timesteps: 1000
    # Minimum env steps to optimize for per train call. This value does
    # not affect learning only the length of iterations.
    timesteps_per_iteration: 10000
    # Fraction of entire training period over which the exploration rate is
    # annealed
    exploration_fraction: 0.1
    # Final value of random action probability
    exploration_final_eps: 0.02
    # Update the target network every `target_network_update_freq` steps.
    target_network_update_freq: 500
    # Use softmax for sampling actions. Required for off policy estimation.
    soft_q: False
    # Softmax temperature. Q values are divided by this value prior to softmax.
    # Softmax approaches argmax as the temperature drops to zero.
    softmax_temp: 1.0
    # If True parameter space noise will be used for exploration
    # See https://blog.openai.com/better-exploration-with-parameter-noise/
    parameter_noise: False
    # Extra configuration that disables exploration.
    evaluation_config:
      exploration_fraction: 0
      exploration_final_eps: 0

    # === Replay buffer ===
    # Size of the replay buffer. Note that if async_updates is set then
    # each worker will have a replay buffer of this size.
    buffer_size: 50000
    # If True prioritized replay buffer will be used.
    prioritized_replay: True
    # Alpha parameter for prioritized replay buffer.
    prioritized_replay_alpha: 0.6
    # Beta parameter for sampling from prioritized replay buffer.
    prioritized_replay_beta: 0.4
    # Fraction of entire training period over which the beta parameter is
    # annealed
    beta_annealing_fraction: 0.2
    # Final value of beta
    final_prioritized_replay_beta: 0.4
    # Epsilon to add to the TD errors when updating priorities.
    prioritized_replay_eps: 0.000001
    # Whether to LZ4 compress observations
    compress_observations: True

    # === Optimization ===
    # Discount factor of the MDP.
    gamma: 0.99
    # Learning rate for adam optimizer
    lr: 0.000025
    # Learning rate schedule
    lr_schedule: # nothing equals None
    # Adam epsilon hyper parameter
    adam_epsilon: 0.00003125
    # If not None clip gradients during optimization at this value
    grad_norm_clipping: 40
    # How many steps of the model to sample before learning starts.
    learning_starts: 500
    # Update the replay buffer with this many samples at once. Note that
    # this setting applies per-worker if num_workers > 1.
    sample_batch_size: 4
    # Size of a batched sampled from replay buffer for training. Note that
    # if async_updates is set then each worker returns gradients for a
    # batch of this size.
    train_batch_size: 32

    # === Parallelism ===
    # Number of workers for collecting samples with. This only makes sense
    # to increase if your environment is particularly slow to sample or if
    # youre using the Async or Ape-X optimizers.
    num_workers: 0
    # Number of environments to evaluate vectorwise per worker. This enables
    # model inference batching, which can improve performance for inference
    # bottlenecked workloads.
    num_envs_per_worker: 1
    # number of gpus for training
    num_gpus: 1
    # Whether to use a distribution of epsilons across workers for exploration.
    per_worker_exploration: False
    # Whether to compute priorities on workers.
    worker_side_prioritization: False
    # Prevent iterations from going lower than this time span
    min_iter_time_s: 1

    # === Advanced Resource Settings ===
    # Number of CPUs to allocate per worker.
    num_cpus_per_worker: 1
    # Number of GPUs to allocate per worker. This can be fractional. This is
    # usually needed only if your env itself requires a GPU (i.e., it is a
    # GPU-intensive video game), or model inference is unusually expensive.
    num_gpus_per_worker: 0
    # Number of CPUs to allocate for the trainer. Note: this only takes effect
    # when running in Tune. Otherwise, the trainer runs in the main program.
    num_cpus_for_driver: 2
    # Whether to attempt to continue training if a worker crashes. The number
    # of currently healthy workers is reported as the "num_healthy_workers"
    # metric.
    ignore_worker_failures: False
